V0103 2022/10/09
1. 在2选1的时候，选择离历史锚点最近的点A，再选择选择未参与定位的测距最少点跟两点距离误差最小值的为最小的点B，若这两个点选择是同一个点，就确定是该点；若这种方案确定的不是同一点，则判断点B是否跨车象限（如左侧到右侧了）了，若没跨，则用点B，跨了则用点A；
2. 定时触发定位时，先处理STS最小值的测距数据（之前是先处理响应测距数据最多的）；
3. 若选择边不构成三角形时，按共线处理；
4. 同一批次5组数据来定位时，历史点取这一批次中的上一组算出来的位置，不再取上一批次最后的定位位置；
5. 一批5组测距数据中选边标记也是5个；
6. 锚点上送的测距数据，若最高bit为1，表示测距失败，为处理后的数据，需要过滤掉最高bit;


V0102  2022/9/30
1. 一次定位出两点时，不再用上一次位置来判定正确的当前位置，选择本次未参于定位的点来判断合理的点；
2. 锚点一次上传5组数据，计算5组定位，统计每一象限落点数， 查找到落点最多的象限，落在这个象限里的点中，跟测量误差最小的值即是本次定位点；
3. 若锚点无测距数据时，不往APP上送测距数据；
4. 由所选两个锚点来定位的边及到这两个锚点的距离，先判断三点是否共线，共线后直接算出位置，不再由三角形定位；




V0101
1. CAN指令wakeup,ranging setup, time sync的超时时间均改至1s，无SAController台架测距大致正常；

20220921 changelog;
2. 定位机制及精度优化；
   前提：车上四边锚点编号：A, B, C, D, 车内锚点假设为E；
   a. 找一组测距数据中的距离最近的锚点，假设为A(非车内锚点);
   b. 找锚点A相临的两个非车内锚点B，C，找到最近距离值所在的锚点B。（测距无效时，距离按最大值FFFF）；
   c. 用锚点A，B进行定位，得到F，G两点；
   d. 用不参与定位的锚点 E（车内点，测距有效），对F，G两点计算距离，距离误差最小值所在的点即为本次定位所确定的点；
      若E点无测距数据，再依次用C或D点对F，G计算距离差，确定定位点；
